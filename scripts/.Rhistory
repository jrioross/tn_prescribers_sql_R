dynasty_attributes %>%
write_rds('../../data/dynasty_attributes.RDS')
# dynasty values
dynasty_values %>%
write_csv('../../data/ktc_historical_dynasty_values.csv')
dynasty_values %>%
write_rds('../../data/ktc_historical_dynasty_values.RDS')
# devy values
devy_values %>%
write_csv('../../data/ktc_historical_devy_values.csv')
devy_values %>%
write_rds('../../data/ktc_historical_devy_values.RDS')
# dynasty values with attributes (aka dynasty_full)
dynasty_full %>%
write_csv('../../data/dynasty_full.csv')
dynasty_full %>%
write_rds('../../data/dynasty_full.RDS')
runApp('NSS/student/DS5/projects/dynasty_fantasy_football_ktc/notebooks/ktc_dashboard')
runApp('NSS/student/DS5/projects/dynasty_fantasy_football_ktc/notebooks/ktc_dashboard')
runApp('NSS/student/DS5/projects/dynasty_fantasy_football_ktc/notebooks/ktc_dashboard')
runApp('NSS/student/DS5/projects/dynasty_fantasy_football_ktc/notebooks/ktc_dashboard')
runApp('NSS/student/DS5/projects/dynasty_fantasy_football_ktc/notebooks/ktc_dashboard')
library(DBI)
library(RPostgres)
install.packages("RPostgres")
library(DBI)
library(RPostgres)
library(tidyverse)
con <- dbConnect(Postgres(),                 # Use the postgres driver
dbname = 'prescribers',     # Name of the database we want to connect to
host = 'localhost',         # 'localhost' or eg. 'ec2-54-83-201-96.compute-1.amazonaws.com'
port = 5432,
user = 'postgres',
password = rstudioapi::askForPassword("Database password"))
dbListTables(con)
dbListFields(con, 'drug')
query = "SELECT * FROM prescriber LIMIT 100;"
res <- dbSendQuery(con, query)
prescribers <- dbFetch(res)
# It is good practice to clear the result after fetching what you need in order to free all resources associated with the result set.
dbClearResult(res)
prescribers %>%
filter(nppes_provider_city == 'NASHVILLE')
setwd("~/NSS/student/DS5/projects/sql_prescribers-jrioross/scripts")
con <- dbConnect(Postgres(),                 # Use the postgres driver
dbname = 'prescribers',     # Name of the database we want to connect to
host = 'localhost',         # 'localhost' or eg. 'ec2-54-83-201-96.compute-1.amazonaws.com'
port = 5432,
user = 'postgres',
password = rstudioapi::askForPassword("Database password"))
dbListTables(con)
dbListFields(prescriber)
dbListFields("prescriber")
dbListFields(con, "prescriber")
query = "
WITH ops_by_zip AS (
SELECT
nppes_provider_zip5 AS zip,
SUM(total_claim_count) AS zip_op_scripts
FROM prescriber
INNER JOIN prescription
USING (npi)
INNER JOIN drug
USING (drug_name)
WHERE opioid_drug_flag = 'Y'
GROUP BY nppes_provider_zip5
),
zip_fips_maxed AS (
SELECT *, MAX(tot_ratio) OVER(PARTITION BY zip) AS max_tot_ratio
FROM zip_fips
),
zf AS (
SELECT zip, fipscounty, county, tot_ratio, max_tot_ratio
FROM zip_fips_maxed
INNER JOIN fips_county
USING (fipscounty)
WHERE tot_ratio = max_tot_ratio
AND state = 'TN'
)
SELECT county, population, SUM(zip_op_scripts) AS op_scripts
FROM ops_by_zip
INNER JOIN zf
USING (zip)
INNER JOIN population
USING (fipscounty)
GROUP BY county, population
"
res <- dbSendQuery(con, query)
ops_by_county <- dbFetch(res)
dbClearResult(res)
query = "
WITH ops_by_zip AS (
SELECT
nppes_provider_zip5 AS zip,
SUM(total_claim_count) AS zip_op_scripts
FROM prescriber
INNER JOIN prescription
USING (npi)
INNER JOIN drug
USING (drug_name)
WHERE opioid_drug_flag = 'Y'
GROUP BY nppes_provider_zip5
),
zip_fips_maxed AS (
SELECT *, MAX(tot_ratio) OVER(PARTITION BY zip) AS max_tot_ratio
FROM zip_fips
),
zf AS (
SELECT zip, fipscounty, county, tot_ratio, max_tot_ratio
FROM zip_fips_maxed
INNER JOIN fips_county
USING (fipscounty)
WHERE tot_ratio = max_tot_ratio
AND state = 'TN'
)
SELECT county, population, SUM(zip_op_scripts) AS op_scripts
FROM ops_by_zip
INNER JOIN zf
USING (zip)
INNER JOIN population
USING (fipscounty)
GROUP BY county, population
ORDER BY op_scripts DESC
"
res <- dbSendQuery(con, query)
ops_by_county <- dbFetch(res)
dbClearResult(res)
ops_by_county %>%
slice_max(op_scripts, n = 5)
ops_by_county %>%
mutate(mean_op_scripts = mean(op_scripts)) %>%
slice_max(op_scripts, n = 5)
ops_by_county %>%
mutate(mean_op_scripts = mean(op_scripts),
median_op_scripts = median(op_scripts)) %>%
#slice_max(op_scripts, n = 5)
ops_by_county %>%
mutate(mean_op_scripts = mean(op_scripts),
median_op_scripts = median(op_scripts))
#slice_max(op_scripts, n = 5)
ops_by_county %>%
mutate(mean_op_scripts = mean(op_scripts),
median_op_scripts = median(op_scripts)) %>%
filter(op_scripts > mean_op_scripts)
# Above median
ops_by_county %>%
mutate(mean_op_scripts = mean(op_scripts),
median_op_scripts = median(op_scripts)) %>%
filter(op_scripts > median_op_scripts)
ops_by_county %>%
ggplot(aes(x = 1, y = op_scripts)) +
geom_boxplot()
library(DBI)
library(RPostgres)
library(tidyverse)
library(plotly)
p <- ops_by_county %>%
ggplot(aes(x = 1, y = op_scripts, text = county)) +
geom_boxplot()
ggplotly(p)
p <- ops_by_county %>%
ggplot(aes(x = 1, y = op_scripts, text = county)) +
geom_boxplot()
ggplotly(p, tooltip = 'text')
p <- ops_by_county %>%
ggplot(aes(x = 1, y = op_scripts)) +
geom_boxplot(aes(text = county))
ggplotly(p, tooltip = 'text')
p <- ops_by_county %>%
ggplot(aes(x = 1, y = op_scripts)) +
geom_boxplot(aes(text = sprintf('County: %s<br>Opioid Scripts: %s', county, op_scripts))
ggplotly(p, tooltip = 'text')
p <- ops_by_county %>%
ggplot(aes(x = 1, y = op_scripts)) +
geom_boxplot(aes(text = sprintf('County: %s<br>Opioid Scripts: %s', county, op_scripts)))
ggplotly(p, tooltip = 'text')
p <- ops_by_county %>%
ggplot(aes(x = 1, y = op_scripts)) +
geom_boxplot(aes(text = sprintf('County: %s<br>Opioid Scripts: %s', county, op_scripts)))
ggplotly(p)
p <- ops_by_county %>%
ggplot(aes(x = 1,
y = op_scripts,
text = sprintf('County: %s<br>Opioid Scripts: %s', county, op_scripts))) +
geom_boxplot()
ggplotly(p)
p <- ops_by_county %>%
ggplot(aes(x = 1,
y = op_scripts,
text = sprintf('County: %s<br>Opioid Scripts: %s', ccounty, op_scripts))) +
geom_boxplot()
ggplotly(p)
p <- ops_by_county %>%
ggplot(aes(x = 1,
y = op_scripts,
text = sprintf('County: %s<br>Opioid Scripts: %s', county, op_scripts))) +
geom_boxplot()
ggplotly(p)
library(DBI)
library(RPostgres)
library(tidyverse)
library(plotly)
library(ggbeeswarm)
p <- ops_by_county %>%
ggplot(aes(x = 1,
y = op_scripts,
text = sprintf('County: %s<br>Opioid Scripts: %s', county, op_scripts))) +
geom_beeswarm() +
geom_boxplot()
ggplotly(p)
p <- ops_by_county %>%
ggplot(aes(x = 1,
y = op_scripts,
text = sprintf('County: %s<br>Opioid Scripts: %s', county, op_scripts))) +
geom_boxplot() +
geom_beeswarm()
ggplotly(p)
p <- ops_by_county %>%
ggplot(aes(x = 1,
y = op_scripts,
text = sprintf('County: %s<br>Opioid Scripts: %s', county, op_scripts))) +
geom_boxplot() +
geom_beeswarm(aes(color = population))
ggplotly(p)
ops_by_county %>%
mutate(ops_per_pop = op_scripts / population)
ops_by_county %>%
mutate(ops_per_pop = op_scripts / population) %>%
ARRANGE(DESC(ops_per_pop))
ops_by_county %>%
mutate(ops_per_pop = op_scripts / population) %>%
arrange(DESC(ops_per_pop))
ops_by_county %>%
mutate(ops_per_pop = op_scripts / population) %>%
arrange(desc(ops_per_pop))
p <- ops_by_county %>%
mutate(ops_per_pop = op_scripts / population) %>%
arrange(desc(ops_per_pop)) %>%
ggplot(aes(x = 1,
y = op_scripts,
text = sprintf('County: %s<br>Opioid Scripts: %s', county, op_scripts))) +
geom_boxplot() +
geom_beeswarm(aes(color = population))
ggplotly(p)
p <- ops_by_county %>%
mutate(ops_per_pop = op_scripts / population) %>%
arrange(desc(ops_per_pop)) %>%
ggplot(aes(x = 1,
y = ops__per_pop,
text = sprintf('County: %s<br>Opioid Scripts: %s', county, ops_per_pop))) +
geom_boxplot() +
geom_beeswarm(aes(color = population))
ggplotly(p)
p <- ops_by_county %>%
mutate(ops_per_pop = op_scripts / population) %>%
arrange(desc(ops_per_pop)) %>%
ggplot(aes(x = 1,
y = ops_per_pop,
text = sprintf('County: %s<br>Opioid Scripts: %s', county, ops_per_pop))) +
geom_boxplot() +
geom_beeswarm(aes(color = population))
ggplotly(p)
query = "
WITH ops_by_npi AS (
SELECT
npi,
nppes_provider_first_name AS first_name,
nppes_provider_last_org_name AS last_name,
specialty_description AS specialty,
nppes_provider_zip5 AS zip,
SUM(total_claim_count) AS prescriber_op_scripts
FROM prescriber
INNER JOIN prescription
USING (npi)
INNER JOIN drug
USING (drug_name)
WHERE opioid_drug_flag = 'Y'
GROUP BY npi,
nppes_provider_first_name,
nppes_provider_last_org_name,
specialty_description,
nppes_provider_zip5
),
zip_fips_maxed AS (
SELECT *, MAX(tot_ratio) OVER(PARTITION BY zip) AS max_tot_ratio
FROM zip_fips
),
zf AS (
SELECT zip, fipscounty, county, tot_ratio, max_tot_ratio
FROM zip_fips_maxed
INNER JOIN fips_county
USING (fipscounty)
WHERE tot_ratio = max_tot_ratio
AND state = 'TN'
)
SELECT first_name,
last_name,
specialty,
county,
population,
prescriber_op_scripts
FROM ops_by_npi
INNER JOIN zf
USING (zip)
INNER JOIN population
USING (fipscounty)
ORDER BY last_name, first_name DESC;
"
res <- dbSendQuery(con, query)
ops_by_prescriber <- dbFetch(res)
dbClearResult(res)
ops_by_prescriber %>%
arrange(desc(op_scripts))
ops_by_prescriber %>%
arrange(desc(prescriber_op_scripts))
ops_by_prescriber %>%
mutate(ops_per_pop = prescriber_op_scripts/population)
arrange(desc(ops_per_pop))
ops_by_prescriber %>%
mutate(ops_per_pop = prescriber_op_scripts/population) %>%
arrange(desc(ops_per_pop))
ops_by_prescriber %>%
mutate(ops_per_pop = prescriber_op_scripts/population) %>%
arrange(desc(ops_per_pop)) %>%
ggplot(aes(x = 0,
y = ops_per_pop)) +
geom_boxplot()
p <- ops_by_prescriber %>%
mutate(ops_per_pop = prescriber_op_scripts/population) %>%
arrange(desc(ops_per_pop)) %>%
ggplot(aes(x = 0,
y = ops_per_pop)) +
geom_boxplot()
ggplotly(p)
p <- ops_by_prescriber %>%
mutate(ops_per_pop = prescriber_op_scripts/population) %>%
arrange(desc(ops_per_pop)) %>%
ggplot(aes(x = 0,
y = ops_per_pop,
text = sprintf('County: %s<br>Opioid Scripts: %s', county, ops_per_pop))) +
geom_boxplot()
geom_beeswarm(aes(color = populations))
ggplotly(p)
p <- ops_by_prescriber %>%
mutate(ops_per_pop = prescriber_op_scripts/population) %>%
arrange(desc(ops_per_pop)) %>%
ggplot(aes(x = 0,
y = ops_per_pop,
text = sprintf('County: %s<br>Opioid Scripts: %s', county, ops_per_pop))) +
geom_boxplot() +
geom_beeswarm(aes(color = populations))
ggplotly(p)
p <- ops_by_prescriber %>%
mutate(ops_per_pop = prescriber_op_scripts/population) %>%
arrange(desc(ops_per_pop)) %>%
ggplot(aes(x = 0,
y = ops_per_pop,
text = sprintf('County: %s<br>Opioid Scripts: %s', county, ops_per_pop))) +
geom_boxplot() +
geom_beeswarm(aes(color = population))
ggplotly(p)
p <- ops_by_prescriber %>%
mutate(ops_per_pop = prescriber_op_scripts/population) %>%
arrange(desc(ops_per_pop)) %>%
ggplot(aes(x = 0,
y = ops_per_pop,
text = sprintf('County: %s<br>Opioid Scripts: %s', county, ops_per_pop))) +
geom_boxplot() +
geom_beeswarm(aes(color = population))
ggplotly(p, tooltip = 'text')
library(DBI)
library(RPostgres)
library(tidyverse)
library(plotly)
library(ggbeeswarm)
con <- dbConnect(Postgres(),                 # Use the postgres driver
dbname = 'prescribers',     # Name of the database we want to connect to
host = 'localhost',         # 'localhost' or eg. 'ec2-54-83-201-96.compute-1.amazonaws.com'
port = 5432,
user = 'postgres',
password = rstudioapi::askForPassword("Database password"))
dbListTables(con)
dbListFields(con, "prescriber")
query = "
WITH ops_by_zip AS (
SELECT
nppes_provider_zip5 AS zip,
SUM(total_claim_count) AS zip_op_scripts
FROM prescriber
INNER JOIN prescription
USING (npi)
INNER JOIN drug
USING (drug_name)
WHERE opioid_drug_flag = 'Y'
GROUP BY nppes_provider_zip5
),
zip_fips_maxed AS (
SELECT *, MAX(tot_ratio) OVER(PARTITION BY zip) AS max_tot_ratio
FROM zip_fips
),
zf AS (
SELECT zip, fipscounty, county, tot_ratio, max_tot_ratio
FROM zip_fips_maxed
INNER JOIN fips_county
USING (fipscounty)
WHERE tot_ratio = max_tot_ratio
AND state = 'TN'
)
SELECT county, population, SUM(zip_op_scripts) AS op_scripts
FROM ops_by_zip
INNER JOIN zf
USING (zip)
INNER JOIN population
USING (fipscounty)
GROUP BY county, population
ORDER BY op_scripts DESC
"
res <- dbSendQuery(con, query)
ops_by_county <- dbFetch(res)
dbClearResult(res)
# Above mean
ops_by_county %>%
mutate(mean_op_scripts = mean(op_scripts),
median_op_scripts = median(op_scripts)) %>%
filter(op_scripts > mean_op_scripts)
# Above median
ops_by_county %>%
mutate(mean_op_scripts = mean(op_scripts),
median_op_scripts = median(op_scripts)) %>%
filter(op_scripts > median_op_scripts)
p <- ops_by_county %>%
ggplot(aes(x = 1,
y = op_scripts,
text = sprintf('County: %s<br>Opioid Scripts: %s', county, op_scripts))) +
geom_boxplot() +
geom_beeswarm(aes(color = population))
ggplotly(p)
ops_by_county %>%
mutate(ops_per_pop = op_scripts / population) %>%
arrange(desc(ops_per_pop))
p <- ops_by_county %>%
mutate(ops_per_pop = op_scripts / population) %>%
arrange(desc(ops_per_pop)) %>%
ggplot(aes(x = 1,
y = ops_per_pop,
text = sprintf('County: %s<br>Opioid Scripts: %s', county, ops_per_pop))) +
geom_boxplot() +
geom_beeswarm(aes(color = population))
ggplotly(p)
query = "
WITH ops_by_npi AS (
SELECT
npi,
nppes_provider_first_name AS first_name,
nppes_provider_last_org_name AS last_name,
specialty_description AS specialty,
nppes_provider_zip5 AS zip,
SUM(total_claim_count) AS prescriber_op_scripts
FROM prescriber
INNER JOIN prescription
USING (npi)
INNER JOIN drug
USING (drug_name)
WHERE opioid_drug_flag = 'Y'
GROUP BY npi,
nppes_provider_first_name,
nppes_provider_last_org_name,
specialty_description,
nppes_provider_zip5
),
zip_fips_maxed AS (
SELECT *, MAX(tot_ratio) OVER(PARTITION BY zip) AS max_tot_ratio
FROM zip_fips
),
zf AS (
SELECT zip, fipscounty, county, tot_ratio, max_tot_ratio
FROM zip_fips_maxed
INNER JOIN fips_county
USING (fipscounty)
WHERE tot_ratio = max_tot_ratio
AND state = 'TN'
)
SELECT first_name,
last_name,
specialty,
county,
population,
prescriber_op_scripts
FROM ops_by_npi
INNER JOIN zf
USING (zip)
INNER JOIN population
USING (fipscounty)
ORDER BY last_name, first_name DESC;
"
res <- dbSendQuery(con, query)
ops_by_prescriber <- dbFetch(res)
dbClearResult(res)
ops_by_prescriber %>%
arrange(desc(prescriber_op_scripts))
ops_by_prescriber %>%
mutate(ops_per_pop = prescriber_op_scripts/population) %>%
arrange(desc(ops_per_pop))
p <- ops_by_prescriber %>%
mutate(ops_per_pop = prescriber_op_scripts/population) %>%
arrange(desc(ops_per_pop)) %>%
ggplot(aes(x = 0,
y = ops_per_pop,
text = sprintf('County: %s<br>Opioid Scripts: %s', county, ops_per_pop))) +
geom_boxplot() +
geom_beeswarm(aes(color = population))
ggplotly(p, tooltip = 'text')
